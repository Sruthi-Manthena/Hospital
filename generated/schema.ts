// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Appointments extends Entity {

  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Appointments entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Appointments must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Appointments", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Appointments | null {
    return changetype<Appointments | null>(
      store.get_in_block("Appointments", id.toHexString()),
    );
  }

  static load(id: Bytes): Appointments | null {
    return changetype<Appointments | null>(
      store.get("Appointments", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }


  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }


export class AppointmentScheds extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AppointmentScheds entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AppointmentScheds must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AppointmentScheds", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AppointmentScheds | null {
    return changetype<AppointmentScheds | null>(
      store.get_in_block("AppointmentScheds", id.toHexString()),
    );
  }

  static load(id: Bytes): AppointmentScheds | null {
    return changetype<AppointmentScheds | null>(
      store.get("AppointmentScheds", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get medicalRecordId(): BigInt {
    let value = this.get("medicalRecordId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set medicalRecordId(value: BigInt) {
    this.set("medicalRecordId", Value.fromBigInt(value));
  }

  get appointmentId(): BigInt {
    let value = this.get("appointmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set appointmentId(value: BigInt) {
    this.set("appointmentId", Value.fromBigInt(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  } 

export class AssociatedPatients extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssociatedPatients entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssociatedPatients must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AssociatedPatients", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AssociatedPatients | null {
    return changetype<AssociatedPatients | null>(
      store.get_in_block("AssociatedPatients", id.toHexString()),
    );
  }

  static load(id: Bytes): AssociatedPatients | null {
    return changetype<AssociatedPatients | null>(
      store.get("AssociatedPatients", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  get patientId(): BigInt {
    let value = this.get("patientId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set patientId(value: BigInt) {
    this.set("patientId", Value.fromBigInt(value));
  }

export class BillingRecords extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BillingRecords entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BillingRecords must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BillingRecords", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BillingRecords | null {
    return changetype<BillingRecords | null>(
      store.get_in_block("BillingRecords", id.toHexString()),
    );
  }

  static load(id: Bytes): BillingRecords | null {
    return changetype<BillingRecords | null>(
      store.get("BillingRecords", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get medicalRecordId(): BigInt {
    let value = this.get("medicalRecordId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set medicalRecordId(value: BigInt) {
    this.set("medicalRecordId", Value.fromBigInt(value));
  }

  get recordId(): BigInt {
    let value = this.get("recordId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set recordId(value: BigInt) {
    this.set("recordId", Value.fromBigInt(value));
  }

 export class Doctors extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Doctors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Doctors must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Doctors", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Doctors | null {
    return changetype<Doctors | null>(
      store.get_in_block("Doctors", id.toHexString()),
    );
  }

  static load(id: Bytes): Doctors | null {
    return changetype<Doctors | null>(store.get("Doctors", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  export class DoctorsDatas extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DoctorsDatas entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DoctorsDatas must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DoctorsDatas", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DoctorsDatas | null {
    return changetype<DoctorsDatas | null>(
      store.get_in_block("DoctorsDatas", id.toHexString()),
    );
  }

  static load(id: Bytes): DoctorsDatas | null {
    return changetype<DoctorsDatas | null>(
      store.get("DoctorsDatas", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }


  get data(): string {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set data(value: string) {
    this.set("data", Value.fromString(value));
  }

export class EmergencyContacts extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EmergencyContacts entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EmergencyContacts must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EmergencyContacts", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EmergencyContacts | null {
    return changetype<EmergencyContacts | null>(
      store.get_in_block("EmergencyContacts", id.toHexString()),
    );
  }

  static load(id: Bytes): EmergencyContacts | null {
    return changetype<EmergencyContacts | null>(
      store.get("EmergencyContacts", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get newEmergencyContact(): string {
    let value = this.get("newEmergencyContact");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set newEmergencyContact(value: string) {
    this.set("newEmergencyContact", Value.fromString(value));
  }

export class InsuranceClaims extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InsuranceClaims entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type InsuranceClaims must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InsuranceClaims", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): InsuranceClaims | null {
    return changetype<InsuranceClaims | null>(
      store.get_in_block("InsuranceClaims", id.toHexString()),
    );
  }

  static load(id: Bytes): InsuranceClaims | null {
    return changetype<InsuranceClaims | null>(
      store.get("InsuranceClaims", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get medicalRecordId(): BigInt {
    let value = this.get("medicalRecordId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set medicalRecordId(value: BigInt) {
    this.set("medicalRecordId", Value.fromBigInt(value));
  }

  get claimId(): BigInt {
    let value = this.get("claimId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimId(value: BigInt) {
    this.set("claimId", Value.fromBigInt(value));
  }

export class MedicalRecords extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MedicalRecords entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MedicalRecords must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MedicalRecords", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MedicalRecords | null {
    return changetype<MedicalRecords | null>(
      store.get_in_block("MedicalRecords", id.toHexString()),
    );
  }

  static load(id: Bytes): MedicalRecords | null {
    return changetype<MedicalRecords | null>(
      store.get("MedicalRecords", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get doctorId(): BigInt {
    let value = this.get("doctorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set doctorId(value: BigInt) {
    this.set("doctorId", Value.fromBigInt(value));
  }

  get admissionDate(): BigInt {
    let value = this.get("admissionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set admissionDate(value: BigInt) {
    this.set("admissionDate", Value.fromBigInt(value));
  }

  get dischargeDate(): BigInt {
    let value = this.get("dischargeDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dischargeDate(value: BigInt) {
    this.set("dischargeDate", Value.fromBigInt(value));
  }

  get diagnoses(): string {
    let value = this.get("diagnoses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set diagnoses(value: string) {
    this.set("diagnoses", Value.fromString(value));
  }

  get treatments(): string {
    let value = this.get("treatments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set treatments(value: string) {
    this.set("treatments", Value.fromString(value));
  }

  get surgeries(): string {
    let value = this.get("surgeries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set surgeries(value: string) {
    this.set("surgeries", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

export class Prescriptions extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Prescriptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Prescriptions must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Prescriptions", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Prescriptions | null {
    return changetype<Prescriptions | null>(
      store.get_in_block("Prescriptions", id.toHexString()),
    );
  }

  static load(id: Bytes): Prescriptions | null {
    return changetype<Prescriptions | null>(
      store.get("Prescriptions", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get medicalRecordId(): BigInt {
    let value = this.get("medicalRecordId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set medicalRecordId(value: BigInt) {
    this.set("medicalRecordId", Value.fromBigInt(value));
  }

  get medication(): string {
    let value = this.get("medication");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set medication(value: string) {
    this.set("medication", Value.fromString(value));
  }

  get dosage(): string {
    let value = this.get("dosage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dosage(value: string) {
    this.set("dosage", Value.fromString(value));
  }

  get frequency(): string {
    let value = this.get("frequency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set frequency(value: string) {
    this.set("frequency", Value.fromString(value));
  }


export class Surgeries extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Surgeries entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Surgeries must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Surgeries", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Surgeries | null {
    return changetype<Surgeries | null>(
      store.get_in_block("Surgeries", id.toHexString()),
    );
  }

  static load(id: Bytes): Surgeries | null {
    return changetype<Surgeries | null>(
      store.get("Surgeries", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  get surgeryDetails(): string {
    let value = this.get("surgeryDetails");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set surgeryDetails(value: string) {
    this.set("surgeryDetails", Value.fromString(value));
  }
}
